// Code generated by MockGen. DO NOT EDIT.
// Source: cache.go
//
// Generated by this command:
//
//	mockgen -source=cache.go -destination=../mocks/mock_cache.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	models "order-service/internal/models"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockOrderCache is a mock of OrderCache interface.
type MockOrderCache struct {
	ctrl     *gomock.Controller
	recorder *MockOrderCacheMockRecorder
	isgomock struct{}
}

// MockOrderCacheMockRecorder is the mock recorder for MockOrderCache.
type MockOrderCacheMockRecorder struct {
	mock *MockOrderCache
}

// NewMockOrderCache creates a new mock instance.
func NewMockOrderCache(ctrl *gomock.Controller) *MockOrderCache {
	mock := &MockOrderCache{ctrl: ctrl}
	mock.recorder = &MockOrderCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderCache) EXPECT() *MockOrderCacheMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockOrderCache) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockOrderCacheMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockOrderCache)(nil).Close))
}

// DeleteOrder mocks base method.
func (m *MockOrderCache) DeleteOrder(ctx context.Context, orderUID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOrder", ctx, orderUID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteOrder indicates an expected call of DeleteOrder.
func (mr *MockOrderCacheMockRecorder) DeleteOrder(ctx, orderUID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOrder", reflect.TypeOf((*MockOrderCache)(nil).DeleteOrder), ctx, orderUID)
}

// GetOrder mocks base method.
func (m *MockOrderCache) GetOrder(ctx context.Context, orderUID string) (*models.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrder", ctx, orderUID)
	ret0, _ := ret[0].(*models.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrder indicates an expected call of GetOrder.
func (mr *MockOrderCacheMockRecorder) GetOrder(ctx, orderUID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrder", reflect.TypeOf((*MockOrderCache)(nil).GetOrder), ctx, orderUID)
}

// PreloadOrders mocks base method.
func (m *MockOrderCache) PreloadOrders(ctx context.Context, order []models.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PreloadOrders", ctx, order)
	ret0, _ := ret[0].(error)
	return ret0
}

// PreloadOrders indicates an expected call of PreloadOrders.
func (mr *MockOrderCacheMockRecorder) PreloadOrders(ctx, order any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PreloadOrders", reflect.TypeOf((*MockOrderCache)(nil).PreloadOrders), ctx, order)
}

// SetOrder mocks base method.
func (m *MockOrderCache) SetOrder(ctx context.Context, order *models.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetOrder", ctx, order)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetOrder indicates an expected call of SetOrder.
func (mr *MockOrderCacheMockRecorder) SetOrder(ctx, order any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetOrder", reflect.TypeOf((*MockOrderCache)(nil).SetOrder), ctx, order)
}
