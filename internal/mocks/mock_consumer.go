// Code generated by MockGen. DO NOT EDIT.
// Source: consumer.go
//
// Generated by this command:
//
//	mockgen -source=consumer.go -destination=../mocks/mock_consumer.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockOrderConsumer is a mock of OrderConsumer interface.
type MockOrderConsumer struct {
	ctrl     *gomock.Controller
	recorder *MockOrderConsumerMockRecorder
	isgomock struct{}
}

// MockOrderConsumerMockRecorder is the mock recorder for MockOrderConsumer.
type MockOrderConsumerMockRecorder struct {
	mock *MockOrderConsumer
}

// NewMockOrderConsumer creates a new mock instance.
func NewMockOrderConsumer(ctrl *gomock.Controller) *MockOrderConsumer {
	mock := &MockOrderConsumer{ctrl: ctrl}
	mock.recorder = &MockOrderConsumerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderConsumer) EXPECT() *MockOrderConsumerMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockOrderConsumer) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockOrderConsumerMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockOrderConsumer)(nil).Close))
}

// Start mocks base method.
func (m *MockOrderConsumer) Start(ctx context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Start", ctx)
}

// Start indicates an expected call of Start.
func (mr *MockOrderConsumerMockRecorder) Start(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockOrderConsumer)(nil).Start), ctx)
}
